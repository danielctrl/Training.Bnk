// <auto-generated />
using System;
using Account.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Account.Infrastructure.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20240730184652_AccountType_Seed")]
    partial class AccountType_Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Account.Domain.Aggregate.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Current"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Savings"
                        });
                });

            modelBuilder.Entity("Account.Domain.Aggregate.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreationDate");

                    b.Property<int>("_accountTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("AccountTypeId");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("Account.Domain.Aggregate.BankAccount", b =>
                {
                    b.OwnsOne("Account.Domain.Aggregate.AccountNumber", "AccountNumber", b1 =>
                        {
                            b1.Property<string>("BankAccountId")
                                .HasColumnType("character varying(26)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("character varying(12)")
                                .HasColumnName("AccountNumber");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccounts");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("Account.Domain.Aggregate.AccountOwner", "AccountOwner", b1 =>
                        {
                            b1.Property<string>("BankAccountId")
                                .HasColumnType("character varying(26)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("AccountOwnerName");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccounts");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("Account.Domain.Aggregate.Balance", "Balance", b1 =>
                        {
                            b1.Property<string>("BankAccountId")
                                .HasColumnType("character varying(26)");

                            b1.Property<DateTime?>("LastUpdated")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BalanceLastUpdated");

                            b1.Property<decimal?>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("Balance");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccounts");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("Account.Domain.Aggregate.CreditLimit", "CreditLimit", b1 =>
                        {
                            b1.Property<string>("BankAccountId")
                                .HasColumnType("character varying(26)");

                            b1.Property<decimal?>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("CreditLimit");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccounts");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.Navigation("AccountNumber")
                        .IsRequired();

                    b.Navigation("AccountOwner")
                        .IsRequired();

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("CreditLimit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
